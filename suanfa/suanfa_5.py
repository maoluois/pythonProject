'''

正则表达式：从文本中，从字符串中抽取特定的字符串

re  包



字符   功能
.      匹配任意一个字符（除了\n）
【】    匹配【】中列举的字符  （必须出现只要有一个就满足）
\d      匹配数字，也就是0——9
\D      匹配非数字，也就是不是数字的字符
\s      匹配空白符，也就是空格  \  tab
\S      匹配非空白符，\s取反
\w      匹配单词字符，a-z A-Z 0-9
\W      匹配非单词字符,lw取反


出现次数
*       匹配前一个字符出现0次多次或者无限次,可有可无,可多可少
+       匹配前一个字符出现1次多次或则无限次,直到出现一次
?       匹配前一个字符出现1次或者0次,要么有1次,要么没有
{m}     匹配前一个字符出现m次
{m,}    匹配前一个字符至少出现m次
{m,n}   匹配前一个字符出现m到n次


^ 匹配字符串的开头
$ 匹配字符串的末尾。

[...] 用来表示一组字符,单独列出：[amk] 匹配 'a'，'m'或'k'
[^...] 不在[]中的字符：[^abc] 匹配除了a,b,c之外的字符。




'''
import re
if __name__ == '__main__':
    string1 = 'XXX高考时间是2018年6月7日'
    string2 = 'XXX高考时间是2018-6-7'
    string7 = '我XXXXX高考时间86236是2018/6/7'
    string6 = '我XXXXX高考时间是2018/6/7'
    # 小括号 子 正则表达式
    # regex_str = '.*高考时间是(\d{4}[年/-]\d{1,2}[月/-](\d{1,2}(日|$)|$))'
    regex_str = '.*高考时间是(\d{4}[年/-]\d{1,2}[月/-](\d{1,2}(日|$)|$))'
    regex_str2 = '[X]*高考时间是(\d{4}[年/-]\d{1,2}[月/-](\d{1,2}(日|$)|$))'

    regex_str6 = '^[我][X]*高考时间是(\d{4}[年/-]\d{1,2}[月/-](\d{1,2}(日|$)|$))'
    regex_str7 = '^[我][X]*高考时间(\d{5})是(\d{4})[年/-]\d{1,2}[月/-](\d{1,2}(日|$)|$))'

    items = re.match(regex_str,string7)
    if items:
        print(items.group(1))
        print(items.group(2))

        # group指正则表达式左括号对应的顺序的对应括号



